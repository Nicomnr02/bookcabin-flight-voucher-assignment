// Code generated by mockery v2.53.4. DO NOT EDIT.

package vouchermocks

import (
	voucherdomain "bookcabin-flight-voucher-assignment/internal/domain/voucher"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// VoucherRepository is an autogenerated mock type for the VoucherRepository type
type VoucherRepository struct {
	mock.Mock
}

// CreateVoucher provides a mock function with given fields: c, data
func (_m *VoucherRepository) CreateVoucher(c context.Context, data voucherdomain.Voucher) error {
	ret := _m.Called(c, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateVoucher")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, voucherdomain.Voucher) error); ok {
		r0 = rf(c, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVouchers provides a mock function with given fields: c, data
func (_m *VoucherRepository) GetVouchers(c context.Context, data voucherdomain.Voucher) ([]voucherdomain.Voucher, error) {
	ret := _m.Called(c, data)

	if len(ret) == 0 {
		panic("no return value specified for GetVouchers")
	}

	var r0 []voucherdomain.Voucher
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, voucherdomain.Voucher) ([]voucherdomain.Voucher, error)); ok {
		return rf(c, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, voucherdomain.Voucher) []voucherdomain.Voucher); ok {
		r0 = rf(c, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]voucherdomain.Voucher)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, voucherdomain.Voucher) error); ok {
		r1 = rf(c, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVoucherRepository creates a new instance of VoucherRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVoucherRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VoucherRepository {
	mock := &VoucherRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
